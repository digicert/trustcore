
##
#  This function combines a set of archives into a single archive.
#
#  output_archive         Name of the calling projects
#  list_of_input_archives List of archives to join
#  Example:
#       set(lib_deps asn1 initialize common platform cryptointerface nanocrypto)
#       add_library(${PROJECT_NAME} STATIC ${MSS_SOURCES})
#       combined_archive(${PROJECT_NAME} ${lib_deps})

#  NOTE: You MUST define the CMake variable MSS_DIR in the calling CMakeLists.txt
#        file that contains the path to the root of "mss"

#############################################################

function(combined_archive output_archive list_of_input_archives)

  if(NOT DEFINED MSS_DIR)
    message(FATAL_ERROR "MSS_DIR not defined, which is needed by locate_lib")
  endif()

  set(tmp_archive ${output_archive}2)
  # We generate an MRI script with the set of archives to join
  set(mri_file ${MSS_DIR}/${tmp_archive}.mri)

  set(FULL_TMP_PATH ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/lib${tmp_archive}.a)
  set(FULL_OUTPUT_PATH ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/lib${output_archive}.a)
  file(WRITE ${mri_file} "create ${FULL_TMP_PATH}\n")

  # Add each archive in the list
  FOREACH(in_archive ${list_of_input_archives})
      message("${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/lib${in_archive}.a")
      list(APPEND archives_full_path ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/lib${in_archive}.a)
      file(APPEND ${mri_file} "addlib ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/lib${in_archive}.a\n")
  ENDFOREACH()

  set(output_archive_dummy_file ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/${tmp_archive}.dummy.c)
  add_custom_command(OUTPUT ${output_archive_dummy_file}
                     COMMAND touch ${output_archive_dummy_file}
                     WORKING_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
                     DEPENDS ${archives_full_path})

  add_library(${tmp_archive} STATIC ${output_archive_dummy_file})

  # Add the project archive that will be generated by calling CMake project.
  file(APPEND ${mri_file} "addlib ${FULL_OUTPUT_PATH}\n")
  file(APPEND ${mri_file} "save\n")
  file(APPEND ${mri_file} "end\n")
  add_custom_command(TARGET ${tmp_archive}
                     POST_BUILD
                     COMMAND ar -M < ${mri_file}
                     COMMAND cp ${FULL_TMP_PATH} ${FULL_OUTPUT_PATH}
                     COMMAND rm ${FULL_TMP_PATH}
                     COMMAND rm ${output_archive_dummy_file})
endfunction(combined_archive)
