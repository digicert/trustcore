# Location of this script
set(SHARED_CMAKE_DIR ${CMAKE_CURRENT_LIST_DIR})

########################################################################
#
# Cross Compiling: Set toolchain file & platform name
#
########################################################################

if(NOT ("${CM_TARGET_PLATFORM}" STREQUAL ""))
  if(NOT DEFINED CM_SYSROOTS)
    set(CM_SYSROOTS "/opt/sysroots/master")
  endif()

  if("${CM_TARGET_PLATFORM}" STREQUAL "rpi32")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/arm-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "linaro_2.23_arm_gnueabihf")
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/sysroot-glibc-linaro-2.23-2018.12-arm-linux-gnueabihf")
    set(CM_BUILD_X32 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "rpi64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/aarch64-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "linaro_2.23_aarch64_gnu")
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/sysroot-glibc-linaro-2.23-2018.12-aarch64-linux-gnu")
    set(CM_BUILD_X64 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "avnet")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/arm-oe-linux-gnueabi-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "avnet_oelinux_3.18.20")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "qnx-x86")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/qnx-x86-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "qnx-x86")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "qnx-6-5-x86")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/qnx-6-5-x86-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "qnx-x86")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "qnx-x86_64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/qnx-x86_64-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "qnx-x86_64")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "bbb")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/arm-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "bbb_ubuntu_16.04")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "wrs_x64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/x86_64-linux-wrs-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "wrs_x86_64")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
    set(CM_BUILD_X64 ON)
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/windriver/9.0/2018.330/i686_64/sysroots/corei7-64-wrs-linux")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "wrs_x86")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/i686-linux-wrs-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "wrs_x86")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/windriver/9.0/2018.330/i686/sysroots/corei7-32-wrs-linux")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "poky_arm" OR "${CM_TARGET_PLATFORM}" STREQUAL "xerox_poky_arm")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/arm-oemllib32-linux-gnueabi.cmake)
    set(CMAKE_MOCANA_PLATFORM "Xerox-ARM")
    set(CMAKE_CROSSCOMPILING true)
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/yocto_tools/3.1.2/2021.207/arm/sysroots/aarch64-oe-linux") ##
    set(PLATFORM_CPU_FLAGS "-mthumb -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a53") ##
    set(CM_BUILD_X32 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "pavo64_poky_arm64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/aarch64-pokysdk-linux-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "voss-ARMv8")
    set(CMAKE_CROSSCOMPILING true)
    set(CMAKE_SYSROOT "/home/yocto/sdk/aarch64-pavo64-stable") ##
    set(PLATFORM_CPU_FLAGS "-mcpu=cortex-a72 -mbranch-protection=standard") ##
    set(CM_BUILD_X64 ON)
    add_definitions(${PLATFORM_CPU_FLAGS})
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "xerox_poky_arm_old")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/arm-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "Xerox-ARM")
    set(CMAKE_CROSSCOMPILING true)
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/poky/2.6.3/sysroots/armv7vet2hf-neon-poky-linux-gnueabi")
    set(PLATFORM_CPU_FLAGS "-march=armv7ve -mthumb -mfpu=neon -mfloat-abi=hard")
    set(CM_BUILD_X32 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "poky_x32" OR "${CM_TARGET_PLATFORM}" STREQUAL "xerox_poky_x32")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/x86_32-linux-poly-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "Xerox-x86-32")
    set(CMAKE_CROSSCOMPILING true)
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/yocto_tools/3.1.2/2021.125/i686/sysroots/corei7-32-poky-linux")
    set(IS_BIG_ENDIAN FALSE)
    set(CM_BUILD_X64 OFF)
    set(CM_BUILD_X32 ON)
    set(PLATFORM_CPU_FLAGS "-m32")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "poky_x64" OR "${CM_TARGET_PLATFORM}" STREQUAL "xerox_poky_x64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/x86_64-linux-poly-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "Xerox-x86-64")
    set(CMAKE_CROSSCOMPILING true)
    set(CMAKE_SYSROOT "${CM_SYSROOTS}/yocto_tools/3.1.2/2021.125/i686_64/sysroots/corei7-64-poky-linux")
    set(IS_BIG_ENDIAN FALSE)
    set(CM_BUILD_X64 ON)
    set(PLATFORM_CPU_FLAGS "-m64")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "aries64_poky_x86-64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/x86-64-pokysdk-linux-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "voss-x86-64")
    set(CMAKE_CROSSCOMPILING true)
    set(CMAKE_SYSROOT "/home/yocto/sdk/x86_64-aries64-stable") ##
    set(IS_BIG_ENDIAN FALSE)
    set(PLATFORM_CPU_FLAGS "-m64 -march=core2 -mtune=core2 -msse3 -mfpmath=sse") ##
    set(CM_BUILD_X64 ON)
    add_definitions(${PLATFORM_CPU_FLAGS})
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "uefi-x86_64")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/x86_64-linux-gnu-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "uefi")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
    set(MX3264_GCC_FLAG -m64)
    set(PLATFORM_CPU_FLAGS "-Os -m64 -fPIC -fno-stack-protector -fno-stack-check -mno-sse -fshort-wchar -fno-strict-aliasing -fno-merge-constants -ffreestanding -fno-builtin -std=gnu89 -mno-red-zone -maccumulate-outgoing-args")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "bbb-bare")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/arm-gcc-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "bbb")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
    set(MX3264_GCC_FLAG "")
    set(PLATFORM_CPU_FLAGS "-Os -mcpu=cortex-a8 -mtune=cortex-a8 -march=armv7-a -mfpu=neon -mfloat-abi=hard")
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "android")
    if(NOT DEFINED ANDROID_NDK)
      message(FATAL_ERROR "ANDROID_NDK environment variable is not set. Set the android-ndk's path in ANDROID_NDK")
    endif()
    set(CMAKE_TOOLCHAIN_FILE ${ANDROID_NDK}/build/cmake/android.toolchain.cmake)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "esp32")
    include(${SHARED_CMAKE_DIR}/toolchains/esp32-linux-toolchain.cmake)
    set(CMAKE_TOOLCHAIN_FILE ${ESP32_IDF_PATH}/tools/cmake/toolchain-esp32.cmake)
    set(CMAKE_MOCANA_PLATFORM "esp32")
    set(CMAKE_CROSSCOMPILING true)
    set(IS_BIG_ENDIAN FALSE)
    set(CM_BUILD_X32 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "timesys_linux_armv7_x32")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/armv7l-timesys-linux-gnueabihf-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "timesys_linux_armv7_x32")
    set(CMAKE_CROSSCOMPILING true)
    set(CM_BUILD_X32 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "buildroot_armv7_cortex-a5_x32")
    set(CMAKE_TOOLCHAIN_FILE ${SHARED_CMAKE_DIR}/toolchains/armv7-buildroot-linux-gnueabihf-toolchain.cmake)
    set(CMAKE_MOCANA_PLATFORM "buildroot_armv7_cortex-a5_x32")
    set(CMAKE_CROSSCOMPILING true)
    set(CM_BUILD_X32 ON)
  elseif("${CM_TARGET_PLATFORM}" STREQUAL "arago_linux_aarch64")
    set(CMAKE_MOCANA_PLATFORM "arago_linux_aarch64")
  else()
    message(FATAL_ERROR "Unrecognized platform name for CM_TARGET_PLATFORM")
  endif()

endif()

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

