/**
 * @file crypto_interface_fips186.h
 *
 * @brief Cryptographic Interface header file for declaring FIPS-186 RNG functions
 * for the Crypto Interface.
 *
 * @filedoc crypto_interface_fips186.h
 *
 * Copyright 2025 DigiCert Project Authors. All Rights Reserved.
 * 
 * DigiCert® TrustCore and TrustEdge are licensed under a dual-license model:
 * - **Open Source License**: GNU AGPL v3. See: https://github.com/digicert/trustcore-test/blob/main/LICENSE
 * - **Commercial License**: Available under DigiCert’s Master Services Agreement. See: https://github.com/digicert/trustcore-test/blob/main/LICENSE_COMMERCIAL.txt  
 *   or https://www.digicert.com/master-services-agreement/
 * 
 * *For commercial licensing, contact DigiCert at sales@digicert.com.*
 *
 */

#ifndef __CRYPTO_INTERFACE_FIPS186_HEADER__
#define __CRYPTO_INTERFACE_FIPS186_HEADER__

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Uses previously allocated FIPS186 Random Context for KSrc Generation.
 *
 * @param pRandomContext Pointer to a previously allocated random context.
 * @param buffer         Buffer to hold the resulting generated bytes.
 *
 * @return            \c OK (0) if successful; otherwise a negative number error
 *                    code definition from merrors.h. To retrieve a string
 *                    containing an English text error identifier corresponding
 *                    to the function's returned error status, use the
 *                    \c DISPLAY_ERROR macro.
 */
MOC_EXTERN MSTATUS CRYPTO_INTERFACE_RANDOM_KSrcGenerator(
    randomContext *pRandomContext,
    ubyte buffer[40]
    );

/**
 * @brief Allocates a new FIPS186 Random Context.
 *
 * @param ppRandomContext The location that will hold the pointer to the new context.
 * @param b               Number of bytes in the X key (\p pXKey).
 * @param pXKey           X key value.
 * @param seedLen         Number of bytes in the X seed (\p pXSeed).
 * @param pXSeed          X seed value.
 *
 * @return            \c OK (0) if successful; otherwise a negative number error
 *                    code definition from merrors.h. To retrieve a string
 *                    containing an English text error identifier corresponding
 *                    to the function's returned error status, use the
 *                    \c DISPLAY_ERROR macro.
 */
MOC_EXTERN MSTATUS CRYPTO_INTERFACE_RANDOM_newFIPS186Context(
    randomContext **ppRandomContext,
    ubyte b,
    const ubyte pXKey[/*b*/],
    sbyte4 seedLen,
    const ubyte pXSeed[/*seedLen*/]
    );

/**
 * @brief Deletes a previously allocated FIPS186 Random Context.
 *
 * @param ppRandomContext The location of the pointer to the context to be deleted.
 *
 * @return            \c OK (0) if successful; otherwise a negative number error
 *                    code definition from merrors.h. To retrieve a string
 *                    containing an English text error identifier corresponding
 *                    to the function's returned error status, use the
 *                    \c DISPLAY_ERROR macro.
 */
MOC_EXTERN MSTATUS CRYPTO_INTERFACE_RANDOM_deleteFIPS186Context(
    randomContext **ppRandomContext
    );


/**
 * @brief Generates pseudo-random bytes via a previously allocated FIPS186 Random
 * Context.
 *
 * @param pRandomCtx       Pointer to a previously allocated random context.
 * @param pRetRandomBytes  Buffer to hold the resulting pseudo-random bytes.
 * @param numRandomBytes   The number of bytes requested.
 *
 * @return            \c OK (0) if successful; otherwise a negative number error
 *                    code definition from merrors.h. To retrieve a string
 *                    containing an English text error identifier corresponding
 *                    to the function's returned error status, use the
 *                    \c DISPLAY_ERROR macro.
 */
MOC_EXTERN MSTATUS CRYPTO_INTERFACE_RANDOM_numberGeneratorFIPS186(
    randomContext *pRandomContext,
    ubyte *pRetRandomBytes,
    sbyte4 numRandomBytes
    );


/**
 * @brief Seed a previously allocated FIPS186 Random Context.
 *
 * @param pRandomCtx  Pointer to a previously allocated random context.
 * @param pSeed       Pointer to a buffer containing the new seed material.
 * @param seedLen     Length in bytes of the new seed material, must be
 *                    between 20 and 64 bytes.
 *
 * @return            \c OK (0) if successful; otherwise a negative number error
 *                    code definition from merrors.h. To retrieve a string
 *                    containing an English text error identifier corresponding
 *                    to the function's returned error status, use the
 *                    \c DISPLAY_ERROR macro.
 */
MOC_EXTERN MSTATUS CRYPTO_INTERFACE_RANDOM_seedFIPS186Context (
    randomContext *pRandomCtx,
    ubyte *pSeed,
    ubyte4 seedLen
    );


#ifdef __cplusplus
}
#endif

#endif /* __CRYPTO_INTERFACE_FIPS186_HEADER__ */
