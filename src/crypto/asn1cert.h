/*
 * asn1cert.h
 *
 * ASN.1 Certificate Encoding Header
 *
 * Copyright 2025 DigiCert Project Authors. All Rights Reserved.
 * 
 * DigiCert® TrustCore and TrustEdge are licensed under a dual-license model:
 * - **Open Source License**: GNU AGPL v3. See: https://github.com/digicert/trustcore-test/blob/main/LICENSE
 * - **Commercial License**: Available under DigiCert’s Master Services Agreement. See: https://github.com/digicert/trustcore-test/blob/main/LICENSE_COMMERCIAL.txt  
 *   or https://www.digicert.com/master-services-agreement/
 * 
 * *For commercial licensing, contact DigiCert at sales@digicert.com.*
 *
 */

/**
 * @file       asn1cert.h
 *
 * @brief      Header file for ASN.1 Certificate Encoding methods.
 * @details    Header file for ASN.1 Certificate Encoding methods.
 *
 * @filedoc    asn1cert.h
 */

/*------------------------------------------------------------------*/

#ifndef __ASN1CERT_HEADER__
#define __ASN1CERT_HEADER__

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief   Generate a certificate with the given input key, signing key, name, issuer, and extensions.
 *
 * @details Generate a certificate with the given input key, signing key, name, issuer, and extensions.
 *          The certificate will be in DER form. Memory will be allocated for the buffer holding
 *          the generated certificate. Please be sure to free this buffer when done with it.
 *
 * @param pCertKey         The input key to associate with the certificate.
 * @param pSubjectInfo     Pointer to the certificate distinguished name structure. The definition
 *                         of this structure can be found in ca_mgmt.h.
 * @param pSignKey         The signing key. The signing algorithm will coincide with the key type.
 * @param pIssuerInfo      Optional. Pointer to the issuer of the certificate in \c ASN1_ITEM form. Please
 *                         see parseasn1.h for a description of this form. This may be ommitted for
 *                         self signed certificates.
 * @param cs               Content stream to be used for the pIssuerInfo. This is required if pIssuerInfo is non-null.
 * @param serialNumber     Optional. Serial number to be used in the certificate. If not provided
 *                         then it will be generated by a SHA1 hashing of the public key.
 * @param serialNumberLen  The length of the serial number in bytes.
 * @param signAlgo         If needed, the hashing algorithm to be used in the signature algorithm.
 *                         This is one of the hash enum's found in crypto.h, for example \c ht_sha256.
 *                         Pass \c ht_none if the signing algorithm is EdDSA.
 * @param pExtensions      Pointer to the certificate extensions data structure. The definition
 *                         of this structure can be found in ca_mgmt.h.
 * @param rngFun           If needed by the signing algorithm, function pointer to a method that will output random data.
 *                         Please see the \c RNGFun definition in random.h.
 * @param rngFunArg        Optional argument, such as a random context, that may be needed by the rngFun.
 * @param ppRetCertificate Pointer to the location of the newly allocated buffer holding the generated certificate.
 *                         This will be a DER form certicicate.
 * @param pRetCertLength   The length of the generated certificate in bytes.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_generateCertificateEx(MOC_ASYM(hwAccelDescr hwAccelCtx)
                                                  const AsymmetricKey *pCertKey,
                                                  const certDistinguishedName *pSubjectInfo,
                                                  const AsymmetricKey *pSignKey,
                                                  const ASN1_ITEM *pIssuerInfo,
                                                  CStream cs,
                                                  const ubyte* serialNumber,
                                                  ubyte4 serialNumberLen,
                                                  ubyte signAlgo,
                                                  const certExtensions* pExtensions,
                                                  RNGFun rngFun, void* rngFunArg,
                                                  ubyte **ppRetCertificate,
                                                  ubyte4 *pRetCertLength);

/**
 * @brief   Generate a self-signed certificate with the given key, name, and extensions.
 *
 * @details Generate a self-signed certificate with the given key, name, and extensions.
 *          The certificate will be in DER form. Memory will be allocated
 *          for the buffer holding the generated certificate. Please
 *          be sure to free this buffer when done with it.
 *
 * @param pCertKey         The input key to associate with the certificate and the signing key.
 *                         The signing algorithm will coincide with the key type.
 * @param pSubjectInfo     Pointer to the certificate distinguished name structure. The definition
 *                         of this structure can be found in ca_mgmt.h.
 * @param signAlgo         If needed, the hashing algorithm to be used in the signature algorithm.
 *                         This is one of the hash enum's found in crypto.h, for example \c ht_sha256.
 *                         Pass \c ht_none if the signing algorithm is EdDSA.
 * @param pExtensions      Pointer to the certificate extensions data structure. The definition
 *                         of this structure can be found in ca_mgmt.h.
 * @param rngFun           If needed by the signing algorithm, function pointer to a method that will output random data.
 *                         Please see the \c RNGFun definition in random.h.
 * @param rngFunArg        Optional argument, such as a random context, that may be needed by the rngFun.
 * @param ppRetCertificate Pointer to the location of the newly allocated buffer holding the generated certificate.
 *                         This will be a DER form certicicate.
 * @param pRetCertLength   The length of the generated certificate in bytes.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_generateSelfSignedCertificate(MOC_ASYM(hwAccelDescr hwAccelCtx) AsymmetricKey *pCertKey,
                                                          const certDistinguishedName *pSubjectInfo,
                                                          ubyte signAlgo,
                                                          const certExtensions* pExtensions,
                                                          RNGFun rngFun,
                                                          void* rngFunArg,
                                                          ubyte **ppRetCertificate,
                                                          ubyte4 *pRetCertLength);

/**
 * @brief   Generate a certificate with the given input key, signing key, name, issuer, and extensions.
 *
 * @details Generate a certificate with the given input key, signing key, name, issuer, and extensions.
 *          The certificate will be in DER form. Memory will be allocated for the buffer holding
 *          the generated certificate. Please be sure to free this buffer when done with it.
 *
 * @param pCertKey         The input key to associate with the certificate.
 * @param pSubjectInfo     Pointer to the certificate distinguished name structure. The definition
 *                         of this structure can be found in ca_mgmt.h.
 * @param pSignKey         The signing key. The signing algorithm will coincide with the key type.
 * @param pIssuerInfo      Optional. Pointer to the issuer of the certificate in \c ASN1_ITEM form. Please
 *                         see parseasn1.h for a description of this form. This may be ommitted for
 *                         self signed certificates.
 * @param cs               Content stream to be used for the pIssuerInfo. This is required if pIssuerInfo is non-null.
 * @param signAlgo         If needed, the hashing algorithm to be used in the signature algorithm.
 *                         This is one of the hash enum's found in crypto.h, for example \c ht_sha256.
 *                         Pass \c ht_none if the signing algorithm is EdDSA.
 * @param pExtensions      Pointer to the certificate extensions data structure. The definition
 *                         of this structure can be found in ca_mgmt.h.
 * @param rngFun           If needed by the signing algorithm, function pointer to a method that will output random data.
 *                         Please see the \c RNGFun definition in random.h.
 * @param rngFunArg        Optional argument, such as a random context, that may be needed by the rngFun.
 * @param ppRetCertificate Pointer to the location of the newly allocated buffer holding the generated certificate.
 *                         This will be a DER form certicicate.
 * @param pRetCertLength   The length of the generated certificate in bytes.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_generateCertificate(MOC_ASYM(hwAccelDescr hwAccelCtx) AsymmetricKey *pCertKey,
                                                const certDistinguishedName *pSubjectInfo,
                                                const AsymmetricKey *pSignKey,
                                                const ASN1_ITEM *pIssuerInfo,
                                                CStream cs, ubyte signAlgo,
                                                const certExtensions* pExtensions,
                                                RNGFun rngFun, void* rngFunArg,
                                                ubyte **ppRetCertificate,
                                                ubyte4 *pRetCertLength);

/* used by PKCS 10 */

/**
 * @brief   Writes the distinguished name components to a certificate in the process of being generated.
 *
 * @details Writes all the distinguished name components to a certificate
 *          in the process of being generated. This method should be used as a substep in
 *          certificate generation and should not be used on an already generated certificate.
 *          This method will NOT overwrite previously existing distinguished name components.
 *
 * @param pRoot     Pointer to the root of the certificate. This is the root of
 *                  the certificate before it is signed and before it has any distinguished
 *                  name components.
 * @param pCertInfo The certificate distinguished name structure. The definition
 *                  of this structure can be found in ca_mgmt.h.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_StoreDistinguishedName( DER_ITEMPTR pRoot,
                                               const certDistinguishedName* pCertInfo);

/**
 * @brief   Writes the public key information to a certificate in the process of being generated.
 *
 * @details Writes the public key information to a certificate in the process of being generated.
 *          This method should be used as a substep in certificate generation and should not
 *          be used on an already generated certificate. This method will NOT overwrite previously
 *          existing public key information.
 *
 * @param pPublicKey   Pointer to the public key to be written.
 * @param pCertificate Pointer to the certificate to which we are generating. This is the root
 *                     of the certificate before it is signed and before it has any
 *                     public key information.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_storePublicKeyInfo(MOC_ASYM(hwAccelDescr hwAccelCtx) const AsymmetricKey* pPublicKey, DER_ITEMPTR pCertificate);


/**
 * @brief   Computes the SHA1 digest of the public key bit-string.
 *
 * @details Computes the SHA1 digest of the public key bit-string for purposes of
 *          being used as the serial number or subjectKeyIdentifier extension.
 *
 * @param pKey         A key consisting of a public key or key pair.
 * @param pResult      Buffer to hold the resulting SHA1. Must be 20 bytes in length.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_sha1PublicKey(MOC_ASYM(hwAccelDescr hwAccelCtx) AsymmetricKey *pKey, ubyte *pResult);

/**
 * @brief   Signs a certificate with a given asymmetric key.
 *
 * @details Signs a certificate with a given asymmetric key. The input certificate is a
 *          \c DER_ITEMPTR pointing to the root of what will be the signed certificate.
 *          The output will be the full signed certificate in DER form. Memory will be
 *          allocated for the buffer holding output certificate. Please be sure to free
 *          this buffer when done with it.
 *
 * @param pSignedHead        Pointer to the root of what will be the signed certificate.
 * @param pSignKey           The signing key. The signing algorithm will coincide with the key type.
 * @param signAlgo           If needed, the hashing algorithm to be used in the signature algorithm.
 *                           This is one of the hash enum's found in crypto.h, for example \c ht_sha256.
 *                           Pass \c ht_none if the signing algorithm is EdDSA.
 * @param rngFun             If needed by the signing algorithm, function pointer to a method that will output random data.
 *                           Please see the \c RNGFun definition in random.h.
 * @param rngFunArg          Optional argument, such as a random context, that may be needed by the rngFun.
 * @param ppRetDEREncoding   Pointer to the location of the newly allocated buffer holding the signed certificate.
 *                           This will be a DER form certicicate.
 * @param pRetDEREncodingLen The length of the signed certificate in bytes.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_Sign(MOC_ASYM(hwAccelDescr hwAccelCtx)
                                 DER_ITEMPTR pSignedHead, const AsymmetricKey* pSignKey, ubyte signAlgo,
                                 RNGFun rngFun, void* rngFunArg, ubyte **ppRetDEREncoding, ubyte4 *pRetDEREncodingLen);

/**
 * @brief   Writes the extensions to a certificate in the process of being generated.
 *
 * @details Writes the extensions to a certificate in the process of being generated.
 *          This method should be used as a substep in certificate generation and should not
 *          be used on an already generated certificate. This method will NOT overwrite previously
 *          existing extensions.
 *
 * @param pExtensionTag  Pointer to the item (ie place) in the certificate for where
 *                       the extensions should be added.
 * @param pExtensions    Pointer to the certificate extensions data structure. The definition
 *                       of this structure can be found in ca_mgmt.h.
 * @param ppExtsItem     Contents will be set to the location of the new extensions item within
 *                       the certificate.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_AddExtensions(DER_ITEMPTR pExtensionTag, const certExtensions* pExtensions,
                                      DER_ITEMPTR *ppExtsItem);

#if (defined(__ENABLE_MOCANA_ECC__))
/**
 * @brief   Writes ECC public key information to a certificate in the process of being generated.
 *
 * @details Writes ECC public key information to a certificate in the process of being generated.
 *          This method should be used as a substep in certificate generation and should not
 *          be used on an already generated certificate. This method will NOT overwrite previously
 *          existing public key information. This method is a specialization of
 *          \c ASN1CERT_storePublicKeyInfo to just ECC keys.
 *
 * @param pECCKey      Pointer to the ECC public key to be written.
 * @param pCertificate Pointer to the certificate to which we are generating. This is the root
 *                     of the certificate before it is signed and before it has any
 *                     public key information.
 *
 * @return  \c OK (0) if successful, otherwise a negative number
 *          error code from merrors.h.
 */
MOC_EXTERN MSTATUS ASN1CERT_storeECCPublicKeyInfo( MOC_ECC(hwAccelDescr hwAccelCtx) const ECCKey *pECCKey, DER_ITEMPTR pCertificate);
#endif

#ifdef __cplusplus
}
#endif

#endif /* __ASN1CERT_HEADER__ */

